=DawinsLaw - Genetic Algorithm Gem

==!!VERY MUCH UNDER CONSTRUCTION!!


Darwins Law is a Genetic Algorithm gem with the aim of providing simple to use GA's that enable you to focus on the behaviour/characteristics you are trying to evolve.


  require 'darwins_law'
  ga = GA::Standard.new(:gene_length => 10, :popsize => 30, :fitness => Proc.new{|genome|
    #add code to evaluate genome and return fitness score (as int/float)
    genome.inject{|i,j| i + j} #the simplest fitness func ever!
  })
  ga.evolve

There are (currently) two GA classes <tt>GeneticAlgorithm::Standard</tt> and <tt>GeneticAlgorithm::Microbial</tt> which perform slightly different styles of evolution (class GA and GeneticAlgorithm are synonymous).
Both classes inherit <tt>GeneticAlgorithm::Base</tt> and are used (and extended) in the same way enabling more control.

===Options/Args

  ga = GA::Standard.new(
    :generations => 500,
    :gene_length => 10,
    :popsize => 30,
    :mutation_rate => 0.1,
    :cross_over_rate => 0.5
    :init_pop_with => Proc.new{ rand*2 - 1 }, #also can be symbol :rand or an int/float
    :mutation_function => Proc.new{|gene| gene + (rand -0.5) },
    :fitness => Proc.new{|genome| genome.inject{|i,j| i + j} }
    :verbose => false
  )


===GA Extensions
All GA classes which inherit from <tt>GeneticAlgorithm::Base</tt> can be extended with extra functionality.  Currently there is one extension; FitnessCaching, which enables the GA to track the fitness of genomes its already encountered.  The chances are the same member will be selected from the population several times, this enables only testing fitness once per genome.  In some cases this can bring the running time of the GA down by half (10th in v simplistic tests).  This is useful with lengthy fitness evaluations and in convergent populations but will become less useful in more diverse populations (large pop, long genomes, high mutation).


  ga = GeneticAlgorithm::Standard.new(:cache_fitness => true)

Or extend an already defined GA;

  ga = GeneticAlgorithm::Microbial.new
  ga.evolve # taking too long, stop and...
  ga.extend FitnessCaching
  ga.evolve # ah, much better


An other extension being bashed out is a set of more detailed outputs.  Currently setting :verbose => true will output the current best ever 100 generations.
There will be a module which can extend a GA and provide more info of each generation; i.e.;

  b2686ce250df9a96fdd1a4730a15ac97--\ <= 9.0
                                     }>-Mutant(1)-7f485549ec3f1b8a3fcdb3397fc15381
  ab070353eb3d8c56fe2fb5b782efbae3--/ <= 7.0

=====Whats with the name
You know.
